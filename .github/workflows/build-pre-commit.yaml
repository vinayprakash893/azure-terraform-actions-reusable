name: terraform-build

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      terraform_directory:
        required: true
        type: string
      artifact-name:
        required: true
        type: string
      jira-key:
        required: false
        type: string
      ARM_CLIENT_ID:
        required: false
        type: string
      destroy:
        required: false
        type: string
    
    secrets:
      ARM_CLIENT_ID :
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      token:
        required: true

            
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/antonbabenko/pre-commit-terraform:latest # latest used here for simplicity, not recommended
    defaults:
      run:
        shell: bash
    outputs:
      pre-commit-output: ${{ steps.pre-commit-run.outputs.pre-commit-output }}
    steps:
      - uses: actions/checkout@v4

      - run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*

      - name: Cache pre-commit since we use pre-commit from container
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-3|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Execute pre-commit
        run: |
          pre-commit run --all-files --color=always | tee githuboutput
          echo "::set-output name=pre-commit-output::$(cat githuboutput)"
          # echo "init-status=${{ steps.pre-commit-run.outputs.pre-commit-output }}" >> $GITHUB_OUTPUT
          echo "hevvvvv"
          echo ${{ steps.pre-commit-run.outputs.pre-commit-output }}

  terraform-validate:
    runs-on: ubuntu-latest
    needs: [pre-commit]
    #environment: ${{ inputs.environment }}
    steps:
      - name: echo precommit
        id: prec
        run: echo ${{ needs.pre-commit.outputs.pre-commit-output}}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Terraform Directory Path
        id: concatenate
        run: echo "terraformdirectory=${{ github.workspace }}/${{ inputs.terraform_directory }}" >> $GITHUB_OUTPUT   
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.concatenate.outputs.terraformdirectory }}
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'vinayprakash893/azure-terraform-actions-reusable'
          ref: main
          #token: ${{ secrets.API_GITHUB_TOKEN }}
          path: 'reusable-workflows-path'

      #TERRAFORM COMMANDS
      - name: Terraform Initialization
        id: terraform-init
        uses: ./reusable-workflows-path/actions
        with:
          working-directory: ${{ steps.concatenate.outputs.terraformdirectory }}
          cli_token: ${{ secrets.TF_API_TOKEN }}
        env:
          #ARM_CLIENT_ID:       ${{ inputs.ARM_CLIENT_ID }}
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}

      - name : Print Title of PR
        env:
            TITLE: ${{ github.event.pull_request.title }}
        run: echo The Title of your PR is $TITLE
      
      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   with:
      #     github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       })
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
      #       })

      #       // 2. Prepare format of the comment
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.terraform-init.outputs.init-status }}\`
      #       #### Check Terraform state file üîé:  \`${{ steps.terraform-init.outputs.state-check }}\`
      #       #### Terraform Validation ü§ñ\`$${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>

      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ steps.concatenate.outputs.terraformdirectory  }}\`, Workflow: \`${{ github.workflow }}\`*`;

      #       // 3. If we have a comment, update it, otherwise create a new one
      #       if (botComment) {
      #         github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #           body: output
      #         })
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         })
      #       }

      #       // const axios = require('axios');

      #       // const url = 'https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69'; // Replace with the actual target URL

      #       // const data = {
      #       //   "issues": ["ISM1-10"],
      #       //   "data": {
      #       //     "releaseVersion": output
      #       //   }
      #       // };

      #       // const headers = {
      #       //   "Content-Type": "application/json"
      #       // };

      #       // axios.post(url, data, { headers })
      #       //   .then(response => {
      #       //     console.log('Response:', response.data);
      #       //   })
      #       //   .catch(error => {
      #       //     console.error('Error:', error);
      #       //   });
      
      # - name: get the comment-message
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   env:
      #       MESSGE: ${{ github.event.head_commit.message }}
      #   run: |
      #     echo Merge Message is: $MESSGE
      #     number=$(echo $MESSGE | grep -oP 'pull request #\K\d+'|| true)
      #     if [ -z "$number" ]; then
      #         echo "No pull request number found."
      #         PR_Number=''
      #         echo "PR_Number=$PR_Number" >> $GITHUB_ENV
      #     else
      #         echo "Pull request number: $number"
      #         PR_Number=$number
      #         echo "PR_Number=$PR_Number" >> $GITHUB_ENV
      #     fi
      #     exit 0
      
      # - name: print commit number
      #   if: env.PR_Number != ''
      #   run: |
      #     echo "$PR_Number"
        
      # - name: Add comment message in PR
      #   if: env.PR_Number != ''
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
      #     script: |
      #       const prNumber = process.env.PR_Number;
      #       github.rest.issues.createComment({
      #         issue_number: prNumber,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'Main branch comment'
      #       })

      # - name: Add failed message in PR
      #   if: ${{ failure() }}
      #   uses: actions/github-script@v6
      #   # env:
      #   #   APPLY: "terraform\n${{ steps.terraform-apply.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
      #     script: |
      #       let number = null ;
      #       if (context.eventName === 'pull_request') {
      #         number = context.payload.pull_request.number;
      #       } 
      #       else if (context.eventName === 'push') {
      #         const commitSHA = context.sha;
      #         const { data: listPullRequestsAssociatedWithCommit } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           commit_sha: commitSHA,
      #         });
      #         if (listPullRequestsAssociatedWithCommit.length === 0) {
      #           console.log("The list is empty. No number available");
      #           } else {
      #           number = listPullRequestsAssociatedWithCommit[0].number;
      #         }
      #       }
            
      #       if (number){
      #       console.log('Issue or Pull Request Number:', number);
      #         github.rest.issues.createComment({
      #           issue_number: number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: 'failed'
      #         })
      #       } else { console.log('No Issue or Pull Request associated with this event.'); }