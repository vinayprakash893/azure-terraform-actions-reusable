name: terraform-apply

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      terraform_directory:
        required: true
        type: string
      artifact-name:
        required: true
        type: string
      plan-changes:
        required: true
        type: string
    
    secrets:
      ARM_CLIENT_ID :
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      token:
        required: true
      

            
jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Download Artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact-name }}
          path: terraform

      - name: Terraform Directory Path
        id: concatenate
        run: echo "terraformdirectory=${{ steps.download.outputs.download-path }}/${{ inputs.terraform_directory }}" >> $GITHUB_OUTPUT   
  
      #TERRAFORM COMMANDS
      - name: Terraform Initialization
        id: terraform-init
        uses: vinayprakash893/azure-terraform-actions-reusable/actions@main
        with:
          working-directory:     ${{ steps.concatenate.outputs.terraformdirectory }}
          cli_token: ${{ secrets.TF_API_TOKEN }}
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      
      # - name: Apply Terraform deployment
      #   id: terraform-apply
      #   #run: terraform plan -no-color -out=tfplan
      #   run: terraform apply --auto-approve
      #   working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
      #   env:
      #     ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #     ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}

      - name: Terraform Apply
        id: terraform-apply
        if: ${{ inputs.plan-changes == 'true' }}
        run: terraform apply #terraform-plan.tfout
        working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}

      # - name: Plan Terraform deployment
      #   id: terraform-plan
      #   shell: bash
      #   run: |
      #     if [[ ${{ github.event_name }} == 'workflow_dispatch' && ${{ github.event.inputs.destroy || 'false' }} == 'true' ]]; 
      #     then
      #       echo "Executing terraform plan --destroy "
      #       terraform plan --destroy
      #     else
      #       echo "Executing terraform plan"
      #       terraform plan
      #     fi
      #   working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
      #   env:
      #     ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #     ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      #     ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
      #     ARM_USE_OIDC: true

      # - name: Test
      #   run: |
      #     curl -X POST https://api.github.com/repos/vinayprakash893/azure-tf-self-service/dispatches \
      #     -H 'Accept: application/vnd.github.everest-preview+json' \
      #     -u ${{ secrets.ACTIONS_KEY }} \
      #     --data '{ "event_type": "detail-log", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'","filename": "'${{ steps.terraform-apply.outcome }}'"}}'

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.terraform-init.outputs.init-status }}\`
            #### Check Terraform state file 🔎:  \`${{ steps.terraform-init.outputs.state-check }}\`
            #### Terraform Validation 🤖\`$${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ steps.concatenate.outputs.terraformdirectory  }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: get the comment-message
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
            MESSGE: ${{ github.event.head_commit.message }}
        run: |
          echo Merge Message is: $MESSGE
          number=$(echo $MESSGE | grep -oP 'pull request #\K\d+'|| true)
          if [ -z "$number" ]; then
              echo "No pull request number found."
              PR_Number=''
              echo "PR_Number=$PR_Number" >> $GITHUB_ENV
          else
              echo "Pull request number: $number"
              PR_Number=$number
              echo "PR_Number=$PR_Number" >> $GITHUB_ENV
          fi
          exit 0
      
      - name: print commit number
        if: env.PR_Number != ''
        run: |
          echo "$PR_Number"
        
      - name: Add comment message in PR
        if: env.PR_Number != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
          script: |
            const prNumber = process.env.PR_Number;
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Main branch comment'
            })