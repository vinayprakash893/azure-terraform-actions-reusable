name: terraform-plan

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      terraform_directory:
        required: true
        type: string
      artifact-name:
        required: true
        type: string
    
    secrets:
      ARM_CLIENT_ID :
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      token:
        required: true
      

            
jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    outputs:
      plan-changes: ${{ steps.terraform-plan.outputs.changes }}

    steps:
      - name: Download Artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: ${{ inputs.artifact-name }}
          path: terraform

      - name: Terraform Directory Path
        id: concatenate
        #run: echo "terraformdirectory=${{ steps.download.outputs.artifactPath }}/${{ inputs.terraform_directory }}" >> $GITHUB_OUTPUT   
        run: echo "terraformdirectory=${{ steps.download.outputs.download-path }}/${{ inputs.terraform_directory }}" >> $GITHUB_OUTPUT   
  
      #TERRAFORM COMMANDS
      - name: Terraform Initialization
        id: terraform-init
        uses: vinayprakash893/azure-terraform-actions-reusable/actions@main
        with:
          working-directory:     ${{ steps.concatenate.outputs.terraformdirectory }}
          cli_token: ${{ secrets.TF_API_TOKEN }}
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
          TF_VAR_ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
          TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          TF_VAR_ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
          TF_VAR_ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
      
      - name: validate Terraform deployment
        id: terraform-validate
        #run: terraform plan -no-color -out=tfplan
        run: terraform validate
        working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
        # env:
        #   ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
        #   ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        #   ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
        #   ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}

      # - name: Plan Terraform deployment
      #   id: terraform-plan
      #   #run: terraform plan -no-color -out=tfplan
      #   run: terraform plan
      #   working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
      #   env:
      #     ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #     ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      #     ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
      #     TF_VAR_ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID  }}
      #     TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #     TF_VAR_ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      #     TF_VAR_ARM_CLIENT_SECRET:   ${{ secrets.ARM_CLIENT_SECRET }}
      #     ARM_USE_OIDC: true

      # - name: Plan Terraform deployment
      #   id: terraform-plan
      #   shell: bash
      #   run: |
      #     if [[ ${{ github.event_name }} == 'workflow_dispatch' && ${{ github.event.inputs.destroy || 'false' }} == 'true' ]]; 
      #     then
      #       echo "Executing terraform plan --destroy "
      #       terraform plan --destroy
      #     else
      #       echo "Executing terraform plan"
      #       terraform plan
      #     fi
      #   working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
      #   env:
      #     ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      #     ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
      #     ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
      #     ARM_USE_OIDC: true

      - name: Terraform Plan
        id: terraform-plan
        shell: bash
        run: |
          plan_output=$(terraform plan -detailed-exitcode 2>&1)
          if [[ $plan_output == *"No changes."* ]]; then
            echo "No changes to deploy."
            echo "::set-output name=changes::false"
          else
            echo "Changes detected, plan created."
            echo "::set-output name=changes::true"
          fi
        working-directory:       ${{ steps.concatenate.outputs.terraformdirectory }}
        env:
          ARM_CLIENT_ID:       ${{ secrets.ARM_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID:       ${{ secrets.ARM_TENANT_ID }}
          ARM_CLIENT_SECRET:  ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_USE_OIDC: true


      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_SCOPED_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.terraform-init.outputs.init-status }}\`
            #### Check Terraform state file 🔎:  \`${{ steps.terraform-init.outputs.state-check }}\`
            #### Terraform Validation 🤖\`$${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ steps.concatenate.outputs.terraformdirectory  }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      # - name: make comment
      #   uses: dkershner6/post-api-call-action@v1
      #   with:
      #     url: https://automation.atlassian.com/pro/hooks/7e0c8982c6766ee66128b036964ae062592d1a69
      #     data: '{"issues":["ISM1-4"], "data": {"releaseVersion":"${{ steps.terraform-init.outcome }}"}}'
      #     headers: "{\"Authorization\": \"Bearer ${{ secrets.API_KEY }}\"}"
      #     params: "{\"content\": \"Test Content\"}"
